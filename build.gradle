/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */
buildscript {
    repositories {
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url "https://oss.sonatype.org/content/groups/public/" }
    }
    dependencies {
        classpath "net.serenity-bdd:serenity-gradle-plugin:3.2.3"
    }
}



plugins {
  id 'java'
  id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.22'
}

// Aplica el plugin agregador de Serenity
//apply plugin: "net.serenity-bdd.aggregator"



repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    // maven { url "https://oss.sonatype.org/content/repositories/releases/" }
    // maven { url "https://oss.sonatype.org/content/groups/public/" }
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
    implementation group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '4.27.0'

    // https://mvnrepository.com/artifact/org.testng/testng
    testImplementation group: 'org.testng', name: 'testng', version: '7.10.2'

    // https://mvnrepository.com/artifact/io.cucumber/cucumber-java
    implementation group: 'io.cucumber', name: 'cucumber-java', version: '7.20.1'


    // https://mvnrepository.com/artifact/io.cucumber/cucumber-junit
    testImplementation group: 'io.cucumber', name: 'cucumber-junit', version: '7.20.1'

    // https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
    implementation group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '5.9.2'

    //dependencia para usar las variables de entorno
    implementation 'io.github.cdimascio:java-dotenv:5.2.2'

    // // Dependencia para Serenity Core (para reportes y funcionalidad base)
    // testImplementation("net.serenity-bdd:serenity-core:3.2.3")

    // // Serenity Cucumber 7: usa la versión disponible, por ejemplo 2.4.34
    // testImplementation("net.serenity-bdd:serenity-cucumber:4.2.17")

    // al lado de serenity-core y serenity-cucumber
    testImplementation 'net.serenity-bdd:serenity-browserstack:4.2.22'

    testImplementation 'net.serenity-bdd:serenity-core:4.2.22'
    testImplementation 'net.serenity-bdd:serenity-cucumber:4.2.22'

    implementation 'com.browserstack:browserstack-local-java:1.0.6'


}

// para usar Java 18 con el proposito de serenity 
java {
    sourceCompatibility = JavaVersion.VERSION_18
    targetCompatibility = JavaVersion.VERSION_18
    toolchain {
        languageVersion = JavaLanguageVersion.of(18)
    }
}


// ────────────────────────────────
// 1 confi de Serenity y BrowserStack 
// ────────────────────────────────
tasks.named('test') {
    // 1.1) Lee el environment (por defecto 'local')
    def env = System.getProperty('environment','local').toLowerCase()
    systemProperty 'environment', env

    if (env == 'browserstack') {
        // 1.2) Usa el driver remoto “provided”
        systemProperty 'webdriver.driver', 'provided'

        // 1.3) Apunta al hub de BrowserStack EU
        systemProperty 'webdriver.remote.url', 'https://hub-eu.browserstack.com/wd/hub'

        // 1.4) Pasa el nombre de build para identificarlo en Automate
        systemProperty 'browserstack.buildName', System.getenv('BROWSERSTACK_BUILD_NAME')

        // 1.5) Reenvío de overrides CLI para capabilities
        def bsBrowser   = System.getProperty('browserstack.capabilities.browserName')
        def bsVersion   = System.getProperty('browserstack.capabilities.browserVersion')
        def bsOS        = System.getProperty('browserstack.capabilities.bstack:options.os')
        def bsOSVer     = System.getProperty('browserstack.capabilities.bstack:options.osVersion')
        def bsResolution= System.getProperty('browserstack.capabilities.bstack:options.resolution')

        if (bsBrowser)    systemProperty 'browserstack.capabilities.browserName',        bsBrowser
        if (bsVersion)    systemProperty 'browserstack.capabilities.browserVersion',     bsVersion
        if (bsOS)         systemProperty 'browserstack.capabilities.bstack:options.os',        bsOS
        if (bsOSVer)      systemProperty 'browserstack.capabilities.bstack:options.osVersion', bsOSVer
        if (bsResolution) systemProperty 'browserstack.capabilities.bstack:options.resolution', bsResolution
    }
    else {
        // 1.6) En local se sigue con chrome o lo q se defina 
        systemProperty 'webdriver.driver', System.getenv('BROWSER') ?: 'chrome'
    }

    // 1.7 para usar el reporte de Serenity 
    systemProperty 'serenity.environment',      env
    systemProperty 'serenity.requirements.dir', 'features'
    systemProperty 'serenity.test.root',        'src/test/java'
    systemProperty 'serenity.take.screenshots', 'AFTER_EACH_STEP'
}

// ────────────────────────────────────────────
// 2) para usar BrowserStack Local y la conexión vpn 
// ────────────────────────────────────────────
tasks.withType(Test).configureEach {
    systemProperty 'environment',            System.getProperty('environment')
    systemProperty 'webdriver.driver',       System.getProperty('webdriver.driver')
    systemProperty 'webdriver.remote.url',   System.getProperty('webdriver.remote.url')
    systemProperty 'browserstack.buildName', System.getProperty('browserstack.buildName')

    systemProperty 'browserstack.capabilities.browserName',        System.getProperty('browserstack.capabilities.browserName')
    systemProperty 'browserstack.capabilities.browserVersion',     System.getProperty('browserstack.capabilities.browserVersion')
    systemProperty 'browserstack.capabilities.bstack:options.os',        System.getProperty('browserstack.capabilities.bstack:options.os')
    systemProperty 'browserstack.capabilities.bstack:options.osVersion', System.getProperty('browserstack.capabilities.bstack:options.osVersion')
    systemProperty 'browserstack.capabilities.bstack:options.resolution', System.getProperty('browserstack.capabilities.bstack:options.resolution')
}
